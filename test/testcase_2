import unittest
from recursion import floydWarshall, INF


class TestFloydWarshallRecursive(unittest.TestCase):
    def test_floyd_warshall_recursive(self):
        graph = [[0, 8, INF, INF, 5, 3, INF, INF],
                 [INF, 0, INF, 11, 5, INF, 9, INF],
                 [7, 4, 0, INF, INF, 4, INF, INF],
                 [INF, INF, INF, 0, 1, INF, INF, 2],
                 [INF, INF, INF, INF, 0, INF, INF, INF],
                 [INF, INF, INF, INF, INF, 0, INF, INF],
                 [INF, INF, INF, 3, INF, INF, 0, 12],
                 [INF, INF, INF, INF, INF, INF, INF, 0]]

        expected = [[0, 8, INF, 19, 5, 3, 17, 21],
                    [INF, 0, INF, 11, 5, INF, 9, 13],
                    [7, 4, 0, 15, 9, 4, 13, 17],
                    [INF, INF, INF, 0, 1, INF, INF, 2],
                    [INF, INF, INF, INF, 0, INF, INF, INF],
                    [INF, INF, INF, INF, INF, 0, INF, INF],
                    [INF, INF, INF, 3, 4, INF, 0, 5],
                    [INF, INF, INF, INF, INF, INF, INF, 0]]

        n = len(graph)
        result = floydWarshall(graph)
        for i in range(n):
            for j in range(n):
                if expected[i][j] == INF:
                    self.assertEqual(result[i][j], INF)
                else:
                    self.assertAlmostEqual(result[i][j], expected[i][j], places=5)


if __name__ == '__main__':
    unittest.main()
